module SequenceDetector1001 (

  input wire clk,

  input wire x,

  output reg z

);



  // Enum for states

  typedef enum logic [2:0] {

    S0, S1, S2, S3, S4

  } state_t;



  // State register

  reg [2:0] current_state, next_state;



  // Output register

  reg z_reg;



  always_ff @(posedge clk) begin

    // State transition and output logic

    case (current_state)

      S0: begin

        next_state = (x == 1'b1) ? S1 : S0;

      end

      S1: begin

        next_state = (x == 1'b0) ? S2 : (x == 1'b1) ? S1 : S0;

      end

      S2: begin

        next_state = (x == 1'b0) ? S3 : (x == 1'b1) ? S1 : S0;

      end

      S3: begin

        next_state = (x == 1'b1) ? S4 : (x == 1'b0) ? S2 : S0;

      end

      S4: begin

        next_state = (x == 1'b1) ? S4 : S0;

      end

      default: next_state = S0;

    endcase



    // Output assignment

    z_reg = (current_state == S4);



    // State update

    current_state <= next_state;

  end



  // Output assignment

  assign z = z_reg;



endmodule
